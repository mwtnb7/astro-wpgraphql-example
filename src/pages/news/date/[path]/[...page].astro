---
import Layout from '@layouts/Layout.astro';
import Section from '@components/layout/Section';
import Container from '@components/layout/Container';
import PageHeader from '@components/layout/PageHeader.astro';
import Heading from '@components/common/Heading';
import Pagination from '@components/ui/Pagination.astro';
import PostItem from '@components/posts/PostItem.astro';
import CategoryArchiveNav from '@features/news/components/CategoryArchiveNav.astro';
import DateArchiveNav from '@features/news/components/DateArchiveNav.astro';
import type { GetStaticPathsOptions } from 'astro';
import type { Post } from '@features/news/types/post';
import type { PaginationData } from '@features/news/types/archive';
import { getAllPosts } from '@features/news/api/getAllPosts';
import { getArchiveMonthsPaths } from '@features/news/api/getArchiveMonthsPaths';
import { getArchiveYearsPaths } from '@features/news/api/getArchiveYearsPaths';

export const getStaticPaths = async ({ paginate }: GetStaticPathsOptions) => {
  const allPosts = await getAllPosts();

  // Create paths
  const years = await getArchiveYearsPaths();
  const months = await getArchiveMonthsPaths();
  const allPaths = years.concat(months);

  return allPaths.flatMap((path: string) => {
    const filteredPosts = allPosts.filter((post: Post) => post.date.startsWith(path));

    // Create props
    const trimmedItem = path.trim();
    const parts = trimmedItem.split('-');
    const year = parseInt(parts[0], 10);
    let month = null;

    if (parts.length > 1 && parts[1]) {
      month = parseInt(parts[1], 10);
    }

    // Create paginate pages
    return paginate(filteredPosts, {
      params: { path: path },
      pageSize: 5,
      props: {
        info: {
          year: year,
          month: month
        }
      }
    });
  });
};

// Props
const { page, info } = Astro.props as { page: PaginationData; info: { year: number; month: number } };

// Variables
const posts = page.data || [];

// SEO
const baseTitle = `お知らせ`;
const dateTitle = info.month ? `${info.year}年${info.month}月` : `${info.year}年`;
const baseDescription = `${dateTitle}の${baseTitle}一覧ページです。`;
const seoTitle =
  page?.currentPage && page?.currentPage !== 1
    ? `${baseTitle} | ${page.currentPage}ページ目 (${page.lastPage}ページ中)`
    : `${dateTitle} | ${baseTitle}`;
const seoDescription = page.currentPage !== 1 ? `${page.currentPage}ページ目 | ${baseDescription}` : baseDescription;
---

<Layout title={seoTitle} description={seoDescription}>
  <PageHeader main="お知らせ" sub="News" />
  <Section size="md">
    <Container size="sm">
      <CategoryArchiveNav />
      <DateArchiveNav />
      <Heading level={2} content="お知らせ一覧" classes="mb-8" />
      {
        posts.length === 0 ? (
          <p class="text-center py-10">現在記事がありません。</p>
        ) : (
          posts.map((post: Post) => (
            <>
              <PostItem title={post.title} href={post.uri} date={post.date} />
            </>
          ))
        )
      }
      <Pagination page={page} />
    </Container>
  </Section>
</Layout>
@components/layouts/Section@components/layouts/Container
